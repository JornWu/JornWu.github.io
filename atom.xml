<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jorn&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://JornWu.github.io/"/>
  <updated>2019-03-06T17:02:00.779Z</updated>
  <id>https://JornWu.github.io/</id>
  
  <author>
    <name>Jorn Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac上Qt的环境变量设置和qmake命令的使用</title>
    <link href="https://JornWu.github.io/2019/03/07/Qt/cjsymdtzz0001ppsg7dhmafdu.html"/>
    <id>https://JornWu.github.io/2019/03/07/Qt/cjsymdtzz0001ppsg7dhmafdu.html</id>
    <published>2019-03-06T16:20:30.000Z</published>
    <updated>2019-03-06T17:02:00.779Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>： 用vim打开终端需要打开配置文件<code>.bash_profile</code>，如果<code>bash_profile</code>文件不存在，就会自动创建，然后需要输入相关配置内容， 然后保存退出，然后输入<code>source ~/.bash_profile</code>使得这个文件生效。</p><h2 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h2><p>1、打开终端需要打开配置文件：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">vi</span> <span class="selector-class">.bash_profile</span></span><br></pre></td></tr></table></figure></p><p>如果<code>bash_profile</code>文件不存在，就会自动创建，然后需要输入以下内容：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">QTDIR</span>=/Users/用户名/Qt5.6.1 #Qt的安装目录</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">LD_LIBRARY_PATH</span>=<span class="variable">$LD_LIBRARY_PATH</span>:$QTDIR/lib #添加Qt库路径</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$QTDIR/bin #添加指令路径</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">"/Users/用户名/Qt5.6.1/5.6/clang_64/bin:<span class="variable">$PATH</span>"</span>#添加工具路径</span><br></pre></td></tr></table></figure></p><p>然后保存退出，然后输入<code>source ~/.bash_profile</code>使得这个文件生效。</p><p>然后退出终端重新运行，输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p><p>然后就能看到环境变量有Qt的路径：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/Users/</span>用户名<span class="regexp">/Qt5.6.1/</span><span class="number">5.6</span><span class="regexp">/clang_64/</span><span class="string">bin:</span><span class="regexp">/usr/</span><span class="string">bin:</span><span class="regexp">/bin:/</span>usr<span class="regexp">/sbin:/</span><span class="string">sbin:</span><span class="regexp">/usr/</span>local<span class="regexp">/bin:/</span>Users<span class="regexp">/用户名/</span>Qt5<span class="number">.6</span><span class="number">.1</span>/bin</span><br></pre></td></tr></table></figure></p><p>2、然后输入<code>qmake －v</code>就能看到当前Qt的版本：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QMake version <span class="number">3.0</span> <span class="comment">#当前版本</span></span><br><span class="line">Using Qt version <span class="number">5.6</span>.<span class="number">1</span> in /Users/用户名/Qt5.<span class="number">6.1</span>/<span class="number">5.6</span>/clang_64/<span class="class"><span class="keyword">lib</span></span></span><br></pre></td></tr></table></figure></p><p>这样就可以使用qmake命令了。</p><h2 id="创建xcode工程"><a href="#创建xcode工程" class="headerlink" title="创建xcode工程"></a>创建xcode工程</h2><p>1、生成 <code>.xcodeproj</code><br>先创建目录，然后进入，使用<code>qmake -project</code>生成<code>pro</code>文件，如果找不到<code>qmake</code>，那就需要手工找，或者重新安装<code>Qt library</code>了，生成<code>pro</code>文件之后，就可以用<code>qmake -spec macx-xcode</code>生成<code>.xcodeproj</code>了，然后，就没有然后了，直接用<code>Xcode</code>打开就 OK。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir Projects/qt_xcode_hello <span class="comment">#建个文件夹先</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> Projects/qt_xcode_hello/ <span class="comment">#进入新建的文件夹 </span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> qmake -project <span class="comment">#生成pro文件 </span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls <span class="comment">#看看生成了啥玩意儿 </span></span></span><br><span class="line">qt_xcode_hello.pro </span><br><span class="line"><span class="meta">$</span><span class="bash"> qmake -spec macx-xcode <span class="comment">#生成xcodeproj</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls <span class="comment">#再看看 </span></span></span><br><span class="line">qt_xcode_hello.pro qt_xcode_hello.xcodeproj </span><br><span class="line"><span class="meta">$</span><span class="bash"> open qt_xcode_hello.xcodeproj/ <span class="comment">#用 Xcode 打开</span></span></span><br></pre></td></tr></table></figure></p><p>2、配置 Xcode 工程<br>打开个空工程，自然是毛也没有，首先工程中新建个文件，然后新建<code>target</code>选<code>other –&gt; External Build System</code>，<code>Product Name</code>就叫<code>qmake</code>，<code>Build Tool</code>指定到<code>qmake</code>的路径，Finish之后，删除<code>Arguments</code>中的<code>$(ACTION)</code>。<code>Command + D</code>，Duplicate出来个<code>qmake copy</code>，改名<code>qmake -project</code>，<code>Arguments</code>填上 <code>-project</code>，先<code>run qmake -project</code>，再<code>run qmake</code>，Xcode工程就和谐了，现在可以写代码跑了。</p><p>明白人一看就知道上面是在干什么了，新建文件，然后<code>qmake -project</code>更新<code>pro</code>文件，再<code>qmake</code>生成<code>makefile</code>。整个过程实际上就三行Shell搞定。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>touch qt_xcode_hello.cpp </span><br><span class="line"><span class="variable">$ </span>qmake -project </span><br><span class="line"><span class="variable">$ </span>qmake</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;： 用vim打开终端需要打开配置文件&lt;code&gt;.bash_profile&lt;/code&gt;，如果&lt;code&gt;bash_profile&lt;/code&gt;文件不存在，就会自动创建，然后需要输入相关配置内容， 然后保存退出，然后输入&lt;code&gt;so
      
    
    </summary>
    
      <category term="Qt" scheme="https://JornWu.github.io/categories/Qt/"/>
    
    
      <category term="环境变量" scheme="https://JornWu.github.io/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
      <category term="qmake" scheme="https://JornWu.github.io/tags/qmake/"/>
    
  </entry>
  
  <entry>
    <title>iOS评分星星的简单实现</title>
    <link href="https://JornWu.github.io/2019/03/06/iOS/cjsymdu5b000gppsgjb84k348.html"/>
    <id>https://JornWu.github.io/2019/03/06/iOS/cjsymdu5b000gppsgjb84k348.html</id>
    <published>2019-03-06T15:54:15.000Z</published>
    <updated>2019-03-06T16:05:04.335Z</updated>
    
    <content type="html"><![CDATA[<p>其实评分的星星实现不是很难，实现的方法很多，有用Quartz2D绘制的，有用<code>self.backgroundColor = UIColor(patternImage: UIImage(named: &quot;imageName&quot;)!)</code>来实现等等，网友提供的实例也很好很多。<br>这里我使用的<code>UIImageView</code>排列来实现，只有一个file，功能简单，代码简洁，一行代码就可以得到想要的效果。可以设置星星的个数（总分），可以设置间距，可以设置大小，可以根据提供不同的图片，得到的“星星”可以不同。到这里你是不是有点好奇呢，到底有多简单。</p><p>代码文件如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  StartView.swift</span></span><br><span class="line"><span class="comment">//  MeiTuan_Swift</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by JornWu on 16/9/5.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016年 Jorn.Wu(jorn_wza@sina.com). All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/****************************************************************************************************/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">** 这是评分的星星个数视图，直接init(...)传入所需的参数就可以生成视图</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/****************************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StarView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> rate: <span class="type">CGFloat!</span> <span class="comment">//评分</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> total: <span class="type">Int!</span> <span class="comment">//总分</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mStarWH: <span class="type">CGFloat!</span> <span class="comment">//星星宽高，默认20</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mSpace: <span class="type">CGFloat!</span> <span class="comment">//间距，默认3</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> starImageFull: <span class="type">UIImage!</span> <span class="comment">//星星图片(填充的)（表示得到分数）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> starImageEmpty: <span class="type">UIImage!</span> <span class="comment">//星星图片(未填充的)（表示未得到的分数）</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(withRate rate: <span class="type">CGFloat</span>, total: <span class="type">Int</span>, starWH: <span class="type">CGFloat?</span>, space: <span class="type">CGFloat?</span>, starImageFull: <span class="type">UIImage</span>, starImageEmpty: <span class="type">UIImage</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> wh: <span class="type">CGFloat</span></span><br><span class="line">        <span class="keyword">var</span> sp: <span class="type">CGFloat</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> starWH == <span class="literal">nil</span>&#123;</span><br><span class="line">            wh = <span class="number">20</span> <span class="comment">//默认 20</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            wh = starWH!</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> space == <span class="literal">nil</span>&#123;</span><br><span class="line">            sp = <span class="number">3</span> <span class="comment">//默认 3</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            sp = space!</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(frame: <span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, (wh + sp) * <span class="type">CGFloat</span>(total), wh + sp * <span class="number">2</span>))<span class="comment">//根据星星大小来确定</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span>.rate = rate</span><br><span class="line">        <span class="keyword">self</span>.total = total</span><br><span class="line">        <span class="keyword">self</span>.mStarWH = wh</span><br><span class="line">        <span class="keyword">self</span>.mSpace = sp</span><br><span class="line">        <span class="keyword">self</span>.starImageFull = starImageFull</span><br><span class="line">        <span class="keyword">self</span>.starImageEmpty = starImageEmpty</span><br><span class="line">        </span><br><span class="line">        setupView()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setupView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">///比例</span></span><br><span class="line">        <span class="keyword">let</span> r = mStarWH / starImageFull.size.width <span class="comment">///因为星星的大小是固定的，所以要适配starView的大小</span></span><br><span class="line">        <span class="keyword">let</span> imgWH = starImageFull.size.width <span class="comment">///星星大小</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">///1 铺好底层</span></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span> ..&lt; total &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">let</span> <span class="built_in">c</span> = index % total</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">let</span> starView = <span class="type">UIImageView</span>(frame: <span class="type">CGRectMake</span>(mSpace + (imgWH + mSpace) * <span class="type">CGFloat</span>(<span class="built_in">c</span>), mSpace, imgWH, imgWH))<span class="comment">///space为间距</span></span><br><span class="line">            starView.image = starImageEmpty</span><br><span class="line">            starView.contentMode = <span class="type">UIViewContentMode</span>.<span class="type">Left</span></span><br><span class="line">            </span><br><span class="line">            starView.transform = <span class="type">CGAffineTransformScale</span>(starView.transform, r, r)<span class="comment">///比例缩放</span></span><br><span class="line">            starView.frame = <span class="type">CGRectMake</span>(mSpace + (mStarWH + mSpace) * <span class="type">CGFloat</span>(<span class="built_in">c</span>), mSpace, mStarWH, mStarWH)<span class="comment">///调整位置</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">self</span>.addSubview(starView)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">///2.1 计算最后一个星星的宽度</span></span><br><span class="line">        <span class="keyword">let</span> w = rate % <span class="number">1</span> * mStarWH <span class="comment">///swift 浮点数可以取余</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> w != <span class="number">0</span> &#123;<span class="comment">//w 为0时裁剪图片出错</span></span><br><span class="line">            <span class="comment">///2.2 处理最后那个星星</span></span><br><span class="line">            <span class="keyword">let</span> fImage = <span class="type">UIImage</span>.cutImage(image: starImageFull, withSize: <span class="type">CGSizeMake</span>(w, mStarWH))</span><br><span class="line">            </span><br><span class="line">            <span class="comment">///3.铺好得分的星星</span></span><br><span class="line">            <span class="keyword">let</span> num = rate - (rate % <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span> ..&lt; <span class="type">Int</span>(num) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">let</span> <span class="built_in">c</span> = index % total</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> index != <span class="type">Int</span>(num - <span class="number">1</span>) &#123;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">let</span> starView = <span class="type">UIImageView</span>(frame: <span class="type">CGRectMake</span>(mSpace + (imgWH + mSpace) * <span class="type">CGFloat</span>(<span class="built_in">c</span>), mSpace, imgWH, imgWH))</span><br><span class="line">                    starView.image = starImageFull</span><br><span class="line">                    starView.contentMode = <span class="type">UIViewContentMode</span>.<span class="type">Left</span></span><br><span class="line">                    </span><br><span class="line">                    starView.transform = <span class="type">CGAffineTransformScale</span>(starView.transform, r, r)<span class="comment">///比例缩放</span></span><br><span class="line">                    starView.frame = <span class="type">CGRectMake</span>(mSpace + (mStarWH + mSpace) * <span class="type">CGFloat</span>(<span class="built_in">c</span>), mSpace, mStarWH, mStarWH)</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">self</span>.addSubview(starView)</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> starView = <span class="type">UIImageView</span>(frame: <span class="type">CGRectMake</span>(mSpace + (imgWH + mSpace) * <span class="type">CGFloat</span>(<span class="built_in">c</span>), mSpace, imgWH, imgWH))</span><br><span class="line">                    starView.image = fImage</span><br><span class="line">                    starView.contentMode = <span class="type">UIViewContentMode</span>.<span class="type">Left</span></span><br><span class="line">                    </span><br><span class="line">                    starView.transform = <span class="type">CGAffineTransformScale</span>(starView.transform, r, r)<span class="comment">///比例缩放</span></span><br><span class="line">                    starView.frame = <span class="type">CGRectMake</span>(mSpace + (mStarWH + mSpace) * <span class="type">CGFloat</span>(<span class="built_in">c</span>), mSpace, mStarWH, mStarWH)</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">self</span>.addSubview(starView)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">///3.铺好得分的星星</span></span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span> ..&lt; <span class="type">Int</span>(rate) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">let</span> <span class="built_in">c</span> = index % total</span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">let</span> starView = <span class="type">UIImageView</span>(frame: <span class="type">CGRectMake</span>(mSpace + (imgWH + mSpace) * <span class="type">CGFloat</span>(<span class="built_in">c</span>), mSpace, imgWH, imgWH))</span><br><span class="line">                starView.image = starImageFull</span><br><span class="line">                starView.contentMode = <span class="type">UIViewContentMode</span>.<span class="type">Left</span></span><br><span class="line">                </span><br><span class="line">                starView.transform = <span class="type">CGAffineTransformScale</span>(starView.transform, r, r)<span class="comment">///比例缩放</span></span><br><span class="line">                starView.frame = <span class="type">CGRectMake</span>(mSpace + (mStarWH + mSpace) * <span class="type">CGFloat</span>(<span class="built_in">c</span>), mSpace, mStarWH, mStarWH)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">self</span>.addSubview(starView)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    // Only override drawRect: if you perform custom drawing.</span></span><br><span class="line"><span class="comment">    // An empty implementation adversely affects performance during animation.</span></span><br><span class="line"><span class="comment">    override func drawRect(rect: CGRect) &#123;</span></span><br><span class="line"><span class="comment">        // Drawing code</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当然还有一个剪切图片的方法：可以放在该文件里或作为<code>UIImageView</code>的extention。<br>实现原理就是，用表示空的星星铺在底层，然后再根据所得的分，铺在上面铺表示得分的星星。整数部分不用处理，小数部分需要裁剪一下图片就好了。详细情况看代码吧。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  UIImageExtension.swift</span></span><br><span class="line"><span class="comment">//  MeiTuan_Swift</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by JornWu on 16/9/5.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016年 Jorn.Wu(jorn_wza@sina.com). All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line">extension UIImage &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> func cutImage(<span class="built_in">image</span> img: UIImage, withSize <span class="built_in">size</span>: CGSize) -&gt; UIImage &#123;</span><br><span class="line">        </span><br><span class="line">        var newSize: CGSize</span><br><span class="line">        </span><br><span class="line">        <span class="comment">///适应图片比例</span></span><br><span class="line">        <span class="built_in">if</span> (img.<span class="built_in">size</span>.<span class="built_in">width</span> / img.<span class="built_in">size</span>.<span class="built_in">height</span>) &lt; (<span class="built_in">size</span>.<span class="built_in">width</span> / <span class="built_in">size</span>.<span class="built_in">height</span>) &#123;<span class="comment">//比例 高过大</span></span><br><span class="line">            newSize = CGSizeMake(img.<span class="built_in">size</span>.<span class="built_in">width</span>, img.<span class="built_in">size</span>.<span class="built_in">width</span> * (<span class="built_in">size</span>.<span class="built_in">height</span> / <span class="built_in">size</span>.<span class="built_in">width</span>))</span><br><span class="line">        &#125;<span class="built_in">else</span> &#123;<span class="comment">//比例 宽过大</span></span><br><span class="line">            newSize = CGSizeMake(img.<span class="built_in">size</span>.<span class="built_in">height</span> * (<span class="built_in">size</span>.<span class="built_in">width</span> / <span class="built_in">size</span>.<span class="built_in">height</span>), img.<span class="built_in">size</span>.<span class="built_in">height</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        let imageRef = CGImageCreateWithImageInRect(img.CGImage, CGRectMake(<span class="number">0</span>, <span class="number">0</span>, newSize.<span class="built_in">width</span>, newSize.<span class="built_in">height</span>))</span><br><span class="line"></span><br><span class="line">        let newImage = UIImage(CGImage: imageRef!)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> newImage</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  然后在需要的地方添加这条代码就可以得到评分星星视图了：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let starView = StarView(<span class="string">withRate:</span> <span class="number">3.75</span>, <span class="string">total:</span> <span class="number">5</span>, <span class="string">starWH:</span> <span class="number">30</span>, <span class="string">space:</span> <span class="number">3</span>,<span class="string">starImageFull:</span> UIImage(<span class="string">named:</span> <span class="string">"icon_star_full"</span>)!, <span class="string">starImageEmpty:</span> UIImage(<span class="string">named:</span> <span class="string">"icon_star_empty"</span>)!)</span><br></pre></td></tr></table></figure></p><p><code>starView</code>本质是一个<code>UIView</code>，还可以根据<code>starView.frame</code>来调整位置。是不是很简单呢，当然如果你想要可以点击星星来进行评分的话，还得在这基础上进行拓展咯。喜欢给个赞吧😝😝😝。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实评分的星星实现不是很难，实现的方法很多，有用Quartz2D绘制的，有用&lt;code&gt;self.backgroundColor = UIColor(patternImage: UIImage(named: &amp;quot;imageName&amp;quot;)!)&lt;/code&gt;来实
      
    
    </summary>
    
      <category term="iOS" scheme="https://JornWu.github.io/categories/iOS/"/>
    
    
      <category term="Swift" scheme="https://JornWu.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>干货 | 五分钟，正则表达式不再是你的烦恼</title>
    <link href="https://JornWu.github.io/2016/09/29/Other/cjsymdu5h000lppsghndulibl.html"/>
    <id>https://JornWu.github.io/2016/09/29/Other/cjsymdu5h000lppsghndulibl.html</id>
    <published>2016-09-28T16:04:48.000Z</published>
    <updated>2019-03-06T15:49:47.375Z</updated>
    
    <content type="html"><![CDATA[<p><strong>序言</strong>：作为一个程序猿，但很多人的“起家”不同，而我则是以iOS“起家”的，所以一直都想写点关于iOS方面，有点意义又有点价值的东西，但是，现在白天忙于工作，而且是Qt和C++方面的项目，所以给iOS探究的时间相对较少。今天就先分享一点关于正则表达式的干货把，作为猿族的我们都知道，正则表达式在匹配查询内容和匹配搜索方面还是较为常用的。但是我不是过目不忘，相信很多人都不是，所以在用到的时候才去查找，然后再去慢慢匹配和测试。看完这篇文章之后，如果觉得还不错，请点一下❤️，让有需要的小伙伴也能看到，你也可以加入收藏，这样我保证能帮你在需要时提高不少效率，这也是我分享这篇文章的初衷所在。</p><h2 id="1、元字符"><a href="#1、元字符" class="headerlink" title="1、元字符"></a>1、元字符</h2><p>表1.常用的元字符</p><table><thead><tr><th style="text-align:center">代码/表达式</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td style="text-align:center">匹配除换行符以外的任意字符</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:center">匹配字母或数字或下划线或汉字</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:center">匹配任意的空白符</td></tr><tr><td style="text-align:center">\d</td><td style="text-align:center">匹配数字</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">匹配单词的开始或结束</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">匹配字符串的开始</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">匹配字符串的结束</td></tr></tbody></table><h2 id="2、字符转义"><a href="#2、字符转义" class="headerlink" title="2、字符转义"></a>2、字符转义</h2><p>如你要查找<code>.</code>，或者<code><em></em></code>,就出现了问题：你没办法指定它们，因为它们会被解释成别的意思。这时你就得使用\来取消这些字符的特殊意义。因此，你应该使用<code>\.</code>和<code> \\ </code>。当然，要查找<code> \ </code>本身，你也得用<code>\\ </code>。</p><h2 id="3、重复"><a href="#3、重复" class="headerlink" title="3、重复"></a>3、重复</h2><p>表2.常用的限定符</p><table><thead><tr><th style="text-align:center">代码/表达式</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td style="text-align:center">重复零次或更多次</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">重复一次或更多次</td></tr><tr><td style="text-align:center">?</td><td style="text-align:center">重复零次或一次</td></tr><tr><td style="text-align:center">{n}</td><td style="text-align:center">重复n次</td></tr><tr><td style="text-align:center">{n,}</td><td style="text-align:center">重复n次或更多次</td></tr><tr><td style="text-align:center">{n,m}</td><td style="text-align:center">重复n到m次</td></tr></tbody></table><h2 id="4、字符类"><a href="#4、字符类" class="headerlink" title="4、字符类"></a>4、字符类</h2><ul><li>[“<em>your set</em>”]：如[aeiou]，则匹配<code>a</code>，<code>e</code>，<code>i</code>，<code>o</code>和<code>u</code>中的<strong>任意一个</strong>，同理[.?!]匹配标点符号(<code>.</code>或<code>?</code>或<code>!</code>)。</li><li>[0-9]：与<code>\d</code>就是完全一致，表示<strong>一位数字</strong>。</li><li>[a-zA-Z]：表示<strong>一个字母</strong>，[a-z0-9A-Z]等同于<code>\w</code>。</li></ul><p>例4-1：\(?0\d{2}[)-]?\d{8}</p><p>分析：这个表达式可以匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等。我们对它进行一些分析吧：首先是一个转义字符<code>\(</code>，它能出现0次或1次<code>?</code>，然后是一个0，后面跟着2个数字<code>\d{2}</code>，然后是)或-或空格中的一个，它出现1次或不出现<code>?</code>，最后是8个数字<code>\d{8}</code>。</p><h2 id="5、分枝条件"><a href="#5、分枝条件" class="headerlink" title="5、分枝条件"></a>5、分枝条件</h2><p>如果你认真去看<strong>例4-1</strong>，发现那个表达式也能匹配010)12345678或(022-87654321这样的“不正确”的格式。要解决这个问题，我们需要用到<strong>分枝条件</strong>。</p><p><em>正则表达式里的<strong>分枝条件</strong>指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用<code>|</code>（竖线）把不同的规则分隔开</em></p><p>例5-1：0\d{2}-\d{8}|0\d{3}-\d{7}</p><p>分析：这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如：010-12345678)，一种是4位区号，7位本地号(如：0376-2233445)，<code>0\d{2}-\d{8}</code>表示“0”加两数字加“-”加8个数字，<code>0\d{3}-\d{7}</code>表示“0”加三数字加“-”加7个数字，<code>|</code>可理解为“或”。就是查找与前者相匹配或者与后者相匹配的内容。</p><p><strong>注意</strong>：使用<strong>分枝条件</strong>时，要注意各个条件的顺序。因为匹配<strong>分枝条件</strong>时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。如：<code>\d{5}-\d{4}|\d{5}</code>和<code>\d{5}|\d{5}-\d{4}</code>是不同的。</p><h2 id="6、分组"><a href="#6、分组" class="headerlink" title="6、分组"></a>6、分组</h2><p>我们已经提到了怎么重复单个字符（直接在字符后面加上限定符就行了）；但如果想要重复多个字符又该怎么办？你可以用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了。</p><p>例6-1：(\d{1,3}.){3}\d{1,3}</p><p>分析：这是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它：<code>\d{1,3}</code>匹配1到3位的数字，<code>(\d{1,3}.)</code> <code>{3}</code>匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字<code>\d{1,3}</code>。</p><p>不幸的是，它也将匹配256.300.888.999这种不可能存在的IP地址。如果能使用算术比较的话，或许能简单地解决这个问题，但是正则表达式中并不提供关于数学的任何功能，所以只能使用冗长的分组，选择，字符类来描述一个正确的IP地址：((2[0-4]\d|25[0-5]|[01]?\d\d?).){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)。</p><h2 id="7、反义"><a href="#7、反义" class="headerlink" title="7、反义"></a>7、反义</h2><p>有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到<strong>反义</strong>。</p><p>表3.常用的反义代码</p><table><thead><tr><th style="text-align:center">代码/表达式</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">\W</td><td style="text-align:center">匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td style="text-align:center">\S</td><td style="text-align:center">匹配任意不是空白符的字符</td></tr><tr><td style="text-align:center">\D</td><td style="text-align:center">匹配任意非数字的字符</td></tr><tr><td style="text-align:center">\B</td><td style="text-align:center">匹配不是单词开头或结束的位置</td></tr><tr><td style="text-align:center">[^x]</td><td style="text-align:center">匹配除了x以外的任意字符</td></tr><tr><td style="text-align:center">[^aeiou]</td><td style="text-align:center">匹配除了aeiou这几个字母以外的任意字符</td></tr></tbody></table><h2 id="8、反向引用"><a href="#8、反向引用" class="headerlink" title="8、反向引用"></a>8、反向引用</h2><p>使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。<br><strong>后向引用</strong>用于重复搜索前面某个分组匹配的文本。例如，<code>\1</code>代表分组1匹配的文本。</p><p>例8-1：\b(\w+)\b\s+\1\b</p><p>分析：可以匹配重复的单词，像go go, 或者kitty kitty。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字<code>\b(\w+)\b</code>，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符<code>\s+</code>，最后是分组1中捕获的内容（也就是前面匹配的那个单词）<code>\1</code>。</p><p>表4.常用分组语法</p><table><thead><tr><th style="text-align:center">分类</th><th style="text-align:center">代码/语法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">捕获</td><td style="text-align:center">(exp)</td><td style="text-align:center">匹配exp,并捕获文本到自动命名的组里</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">(?&lt;name>exp)</td><td style="text-align:center">匹配exp,并捕获文本到名称为name的组里，也可以写成(?’name’exp)</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">(?:exp)</td><td style="text-align:center">匹配exp,不捕获匹配的文本，也不给此分组分配组号</td></tr><tr><td style="text-align:center">零宽断言</td><td style="text-align:center">(?=exp)</td><td style="text-align:center">匹配exp前面的位置</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">(?&lt;=exp)</td><td style="text-align:center">匹配exp后面的位置</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">(?!exp)</td><td style="text-align:center">匹配后面跟的不是exp的位置</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">(?&lt;!exp)</td><td style="text-align:center">匹配前面不是exp的位置</td></tr><tr><td style="text-align:center">注释</td><td style="text-align:center">(?#comment)</td><td style="text-align:center">这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</td></tr></tbody></table><h2 id="9、贪婪与懒惰"><a href="#9、贪婪与懒惰" class="headerlink" title="9、贪婪与懒惰"></a>9、贪婪与懒惰</h2><p>当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。以这个表达式为例：a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。<br>有时，我们更需要懒惰匹配，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。这样.*?就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。现在看看懒惰版的例子吧：<br>a.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。</p><p><strong>注意</strong>：最先开始的匹配拥有最高的优先权</p><p>表5.懒惰限定符</p><table><thead><tr><th style="text-align:center">代码/表达式</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">*?</td><td style="text-align:center">重复任意次，但尽可能少重复</td></tr><tr><td style="text-align:center">+?</td><td style="text-align:center">重复1次或更多次，但尽可能少重复</td></tr><tr><td style="text-align:center">??</td><td style="text-align:center">重复0次或1次，但尽可能少重复</td></tr><tr><td style="text-align:center">{n,m}?</td><td style="text-align:center">重复n到m次，但尽可能少重复</td></tr><tr><td style="text-align:center">{n,}?</td><td style="text-align:center">重复n次以上，但尽可能少重复</td></tr></tbody></table><hr><blockquote><p>注：该文章引用于<a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">正则表达式30分钟入门教程</a>，更多更详细介绍请查看原文。</p></blockquote><hr><blockquote><p>附表：</p></blockquote><table><thead><tr><th style="text-align:center">代码/表达式</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">\</td><td style="text-align:center">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\\’ 匹配 “\” 而 “\(“ 则匹配 “(“。</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">匹配前面的子表达式零次或多次。例如，zo<em> 能匹配 “z” 以及 “zoo”。</em> 等价于{0,}。</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td style="text-align:center">?</td><td style="text-align:center">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 中的”do” 。? 等价于 {0,1}。</td></tr><tr><td style="text-align:center">{n}</td><td style="text-align:center">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td style="text-align:center">{n,}</td><td style="text-align:center">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*‘。</td></tr><tr><td style="text-align:center">{n,m}</td><td style="text-align:center">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td style="text-align:center">?</td><td style="text-align:center">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">匹配除 “\n” 之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用象 ‘[.\n]’ 的模式。</td></tr><tr><td style="text-align:center">(pattern)</td><td style="text-align:center">匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td></tr><tr><td style="text-align:center">(?:pattern)</td><td style="text-align:center">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用“或”字符“&#124;”来组合一个模式的各个部分是很有用。例如， ‘industr(?:y&#124;ies)’就是一个比 ‘industry&#124;industries’ 更简略的表达式。</td></tr><tr><td style="text-align:center">(?=pattern)</td><td style="text-align:center">正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，’Windows (?=95&#124;98&#124;NT&#124;2000)’ 能匹配 “Windows 2000” 中的 “Windows” ，但不能匹配 “Windows 3.1” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td style="text-align:center">(?!pattern)</td><td style="text-align:center">负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如’Windows (?!95&#124;98&#124;NT&#124;2000)’ 能匹配 “Windows 3.1” 中的 “Windows”，但不能匹配 “Windows 2000” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td style="text-align:center">x&#124;y</td><td style="text-align:center">匹配x 或 y。例如，’z&#124;food’ 能匹配 “z” 或 “food”。’(z&#124;f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td style="text-align:center">[xyz]</td><td style="text-align:center">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td style="text-align:center">[^xyz]</td><td style="text-align:center">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td></tr><tr><td style="text-align:center">[a-z]</td><td style="text-align:center">字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td style="text-align:center">[^a-z]</td><td style="text-align:center">负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td style="text-align:center">\B</td><td style="text-align:center">匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr><tr><td style="text-align:center">\cx</td><td style="text-align:center">匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td style="text-align:center">\d</td><td style="text-align:center">匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td style="text-align:center">\D</td><td style="text-align:center">匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td style="text-align:center">\f</td><td style="text-align:center">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td style="text-align:center">\n</td><td style="text-align:center">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td style="text-align:center">\r</td><td style="text-align:center">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:center">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td style="text-align:center">\S</td><td style="text-align:center">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:center">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td style="text-align:center">\v</td><td style="text-align:center">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:center">匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。</td></tr><tr><td style="text-align:center">\W</td><td style="text-align:center">匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]’。</td></tr><tr><td style="text-align:center">\xn</td><td style="text-align:center">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td style="text-align:center">\num</td><td style="text-align:center">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td></tr><tr><td style="text-align:center">\n</td><td style="text-align:center">标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td style="text-align:center">\nm</td><td style="text-align:center">标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td></tr><tr><td style="text-align:center">\nml</td><td style="text-align:center">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td style="text-align:center">\un</td><td style="text-align:center">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table><hr><blockquote><p>用户名：^[a-z0-9_-]{3,16}$</p><p>密码：^[a-z0-9_-]{6,18}$</p><p>十六进制值：^#?([a-f0-9]{6}|[a-f0-9]{3})$</p><p>电子邮箱：^([a-z0-9_.-]+)@([\da-z.-]+).([a-z.]{2,6})$</p><p>URL：^(https?:\/\/)?([\da-z.-]+).([a-z.]{2,6})([\/\w .-]*)*\/?$</p><p>IP 地址：^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$</p><p>HTML 标签：^&lt;([a-z]+)([^&lt;]+)*(?:&gt;(.*)&lt;\/\1&gt;|\s+\/&gt;)$</p><p>Unicode编码中的汉字范围：^[u4e00-u9fa5],{0,}$</p><p>匹配中文字符的正则表达式： [\u4e00-\u9fa5]</p><p>评注：匹配中文还真是个头疼的事，有了这个表达式就好办了</p><p>匹配双字节字符(包括汉字在内)：[^\x00-\xff]</p><p>评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）</p><p>匹配空白行的正则表达式：\n\s*\r</p><p>评注：可以用来删除空白行</p><p>匹配HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;</p><p>评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力</p><p>匹配首尾空白字符的正则表达式：^\s*|\s*$</p><p>评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式</p><p>匹配Email地址的正则表达式：\w+([-+.]\w+)*@\w+([-.]\w+)*.\w+([-.]\w+)*</p><p>评注：表单验证时很实用</p><p>匹配网址URL的正则表达式：[a-zA-z]+://[^\s]*</p><p>评注：网上流传的版本功能很有限，上面这个基本可以满足需求</p><p>匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</p><p>评注：表单验证时很实用</p><p>匹配国内电话号码：\d{3}-\d{8}|\d{4}-\d{7}</p><p>评注：匹配形式如 0511-4405222 或 021-87888822</p><p>匹配腾讯QQ号：[1-9][0-9]{4,}</p><p>评注：腾讯QQ号从10000开始</p><p>匹配中国大陆邮政编码：[1-9]\d{5}(?!\d)</p><p>评注：中国大陆邮政编码为6位数字</p><p>匹配身份证：\d{15}|\d{18}</p><p>评注：中国大陆的身份证为15位或18位</p><p>匹配ip地址：\d+.\d+.\d+.\d+</p><p>评注：提取ip地址时有用</p><p>匹配特定数字：</p><p>^[1-9]\d*$　 　 //匹配正整数</p><p>^-[1-9]\d*$ 　 //匹配负整数</p><p>^-?[1-9]\d*$　　 //匹配整数</p><p>^[1-9]\d*|0$　 //匹配非负整数（正整数 + 0）</p><p>^-[1-9]\d*|0$　　 //匹配非正整数（负整数 + 0）</p><p>^[1-9]\d*.\d*|0.\d*[1-9]\d*$　　 //匹配正浮点数</p><p>^-([1-9]\d*.\d*|0.\d*[1-9]\d*)$　 //匹配负浮点数</p><p>^-?([1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0)$　 //匹配浮点数</p><p>^[1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0$　　 //匹配非负浮点数（正浮点数 + 0）</p><p>^(-([1-9]\d*.\d*|0.\d*[1-9]\d*))|0?.0+|0$　　//匹配非正浮点数（负浮点数 + 0）</p><p>评注：处理大量数据时有用，具体应用时注意修正</p><p>匹配特定字符串：<br>^[A-Za-z]+$　　//匹配由26个英文字母组成的字符串</p><p>^[A-Z]+$　　//匹配由26个英文字母的大写组成的字符串</p><p>^[a-z]+$　　//匹配由26个英文字母的小写组成的字符串</p><p>^[A-Za-z0-9]+$　　//匹配由数字和26个英文字母组成的字符串</p><p>^\w+$　　//匹配由数字、26个英文字母或者下划线组成的字符串</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;序言&lt;/strong&gt;：作为一个程序猿，但很多人的“起家”不同，而我则是以iOS“起家”的，所以一直都想写点关于iOS方面，有点意义又有点价值的东西，但是，现在白天忙于工作，而且是Qt和C++方面的项目，所以给iOS探究的时间相对较少。今天就先分享一点关于正
      
    
    </summary>
    
      <category term="Other" scheme="https://JornWu.github.io/categories/Other/"/>
    
    
      <category term="正则表达式" scheme="https://JornWu.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>看了这个，你就可以打造自己的美图秀秀</title>
    <link href="https://JornWu.github.io/2016/09/21/iOS/cjsymdtzv0000ppsgl6q8cytv.html"/>
    <id>https://JornWu.github.io/2016/09/21/iOS/cjsymdtzv0000ppsgl6q8cytv.html</id>
    <published>2016-09-21T15:19:22.000Z</published>
    <updated>2019-03-06T16:00:06.699Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章<a href="http://www.jianshu.com/p/7b0def7c2e74" target="_blank" rel="noopener">iOS_最全的二维码篇</a>说要给大家简绍一下强大而好玩工具<code>CIFilter</code>,所以这今天晚上给大家分享一个demo。我保证你看了这篇文章之后，肯定能做出自己的美图工具，我发誓（虽然并没卵用）。</p><p><code>CIFilter</code>,其实就是一个滤镜。喜欢摄影的小伙伴，可能接触过PS，而接触过PS的小伙伴，对滤镜肯定不陌生。而且有了解相关知识的小伙伴，对于颜色和图片处理的认知也一定信手捏来。什么RGB，什么CMYK，什么灰度图片，什么高斯模糊，什么锐化，什么对比度，什么饱和度，什么颜色通道，为什么值在255之间等等。我为什么知道这些，其实我也是大一的时候，刚上大学，课不是很多，时间充足，那时候，都还不知道LOL(呵呵，现在，此处省略1W字)，还带着高中的稚气和志气。想想要学点啥一技之长。记得高中时候，有次去拍一寸照，看那sb老板，不懂PS，硬是给我照片乱修。结果照片老丑，还硬坑我20块钱。所以大学就想到自己学学PS，在处理照片的时候可以自己修。而且，PS还可以做很多平面设计。说不定以后可以去做设计的工作。一个好的设计师，薪资还是很高的（^_^）。所以自己学了一年多的PS（堪称大神了，然并卵），后来学的差不多了。海报设计，网页设计，UI设计，还有其他各种设计，图文排版，图片处理，婚纱处理，P图等什么滴都自己做过（厉害吧）。大二的时候又学了一年的AI，后来还想学AE来着（因为大学嘛，越到后来，你懂得。游戏也开始玩起来了）。学了PS和AI，其实我还是觉得很不错的，不只在一个地方看到，PS和AI就像左右手，这也是做平面设计的工作者必备的两技能。一个负责位图，一个负责矢量图，功能都超强大。现在iOS上用的icon基本都是用这两工具设计的。虽然现在不慎混到了程序猿的大流。不过想想懂这也不是无可用武之地，至少在图片处理，颜色的认知上还有挺有帮助的（呵呵，安慰一下自己）。（扯远了。。。）</p><p>言归正传，你学会使用<code>CIFilter</code>，你就可以随意处理你想要的效果。系统给我们提供的滤镜种类是非常的多，不是十几个，是几十个。没错！</p><blockquote><p><code>CoreImage</code>是个非常强大框架，集图片的几乎所有操作编辑于一身，<code>CIFilter</code>只是其中的一个工具，主要作用是给图片渲染不同的效果<br><code>CIFilter</code>的种类很多，所以苹果的官方文档也只能给出部分常用的种类的说明。<br>官方文档给出的部分说明：<a href="https://developer.apple.com/library/content/documentation/GraphicsImaging/Reference/CoreImageFilterReference/index.html#//apple_ref/doc/uid/TP30000136-SW29" target="_blank" rel="noopener">点击这里</a><br>虽然官方文档很简洁，但国外的大神们已经证明这是个相当强悍的框架，<br>不仅功能强大，而且可以直接使用<code>GPU</code>，效率奇高，甚至可以实时的对视频进行渲染。</p><p>下面让我们来看看，如何具体使用它：<br>首先你需要导入<code>CoreImage.framework</code>框架；进行Mac（不是iOS）开发的同学请导入<code>QuartzCore.framework</code>框架，包含在其中了。<br>然后我们先来看看3个主要的类：<br><code>CIContext</code>：它与<code>CoreGraphics</code>和 <code>OpenGL context</code>类似，所有<code>CoreImage</code>的处理流程都通过它来进行；<br><code>CIImage</code>：它用来存放图片数据，可以通过<code>UIImage</code>，图片文件或像素数据创建；<br><code>CIFilter</code>：通过它来定义过滤器的详细属性。<br><code>CIContext</code>有两种初始化方法，分别对应<code>GPU</code>和<code>CPU</code></p></blockquote><pre>       // 创建基于GPU的CIContext对象    context = [CIContext contextWithOptions: nil];    // 创建基于CPU的CIContext对象    //context = [CIContext contextWithOptions: [NSDictionarydictionaryWithObject:[NSNumber numberWithBool:YES]    forKey:kCIContextUseSoftwareRenderer]];    一般采用第一种基于GPU的，因为效率要比CPU高很多，但是要注意的是基于GPU的CIContext对象无法跨应用访问。    比如你打开UIImagePickerController要选张照片进行美化，如果你直接在UIImagePickerControllerDelegate的委托方法里调用CIContext对象进行处理，那么系统会自动将其降为基于CPU的，速度会变慢，所以正确的方法应该是在委托方法里先把照片保存下来，回到主类里再来处理。</pre><p><code>CIFilter</code>的强大之处在于，可以叠加来得到多种效果。看过<a href="http://www.jianshu.com/p/7b0def7c2e74" target="_blank" rel="noopener">iOS_最全的二维码篇</a>这篇文章的小伙伴肯定知道了什么叫叠加，其实如果你按那篇文章我说的练习一下，你就会发现，得到的图片也还是不过清晰。因为，二维码生成的原图太小，放大就很模糊。其实我在用PS处理手机拍的图片时，一开始少不了这三步，补点光，太暗；增加的对比度，不够鲜明；锐化一下，细节不过清晰。对，就是锐化一下。等下会让你获得一副清晰的二维码图。</p><p>首先让你知道，怎么查看到底有哪些滤镜：</p><pre><code>        /* Categories *///        public let kCICategoryDistortionEffect: String ///失真效果//        public let kCICategoryGeometryAdjustment: String ///几何调整//        public let kCICategoryCompositeOperation: String ///复合操作//        public let kCICategoryHalftoneEffect: String ///半色调效果//        public let kCICategoryColorAdjustment: String ///颜色调整//        public let kCICategoryColorEffect: String ///颜色效果//        public let kCICategoryTransition: String ///翻转//        public let kCICategoryTileEffect: String ///瓦片效果//        public let kCICategoryGenerator: String ///生成器//        @available(iOS 5.0, *)//        public let kCICategoryReduction: String ///削减//        public let kCICategoryGradient: String ///梯度//        public let kCICategoryStylize: String ///风格//        public let kCICategorySharpen: String ///锐化//        public let kCICategoryBlur: String ///模糊//        public let kCICategoryVideo: String ///视频//        public let kCICategoryStillImage: String ///静态图片//        public let kCICategoryInterlaced: String ///交叉//        public let kCICategoryNonSquarePixels: String ///非方形像素//        public let kCICategoryHighDynamicRange: String ///高动态范围//        public let kCICategoryBuiltIn: String ///内建//        @available(iOS 9.0, *)//        public let kCICategoryFilterGenerator: String ///滤镜生成器</code></pre><p>这是系统含有的所有大类。<br>想知道有哪些filter类型或想查找想要的filter类型，可以通过先查找大的分类（如上），然后在查找子项。</p><pre><code>        let names = CIFilter.filterNames(inCategory: kCICategoryGenerator) ///kCICategoryGenerator大类        print(names)</code></pre>这样就会输出该大类包含的所有滤镜。如上会输出所有的生成器类型<code>CIFilter</code>种类：<pre><code> ///生成器大类所包含的所有生成器子类，如："CICode128BarcodeGenerator"（条形码生成器），"CIQRCodeGenerator"（二维码生成器）//        ["CIAztecCodeGenerator",//         "CICheckerboardGenerator",//         "CICode128BarcodeGenerator", ///条形码生成器//         "CIConstantColorGenerator",//         "CILenticularHaloGenerator",//         "CIPDF417BarcodeGenerator",//         "CIQRCodeGenerator", ///二维码生成器//         "CIRandomGenerator",//         "CIStarShineGenerator",//         "CIStripesGenerator",//         "CISunbeamsGenerator"]</code></pre><p>然后就可以创建滤镜对象了,有两方法，含参数的仅iOS8之后可用，iOS上不设输入参数，系统会使用默认值，但是mac是会报错，输入参数不明确：</p><pre><code>/** Creates a new filter of type 'name'.         On OSX, all input values will be undefined.         On iOS, all input values will be set to default values. */        /// 要是是mac开发，创建filter对象必须提供输入参数，iOS可以忽略，系统会使用默认值。        //init?(name: String)        //@available(iOS 8.0, *) ///iOS 8.0 之后        //init?(name: String, withInputParameters params: [String : Any]?)</code></pre><p>看看该滤镜需要设置那些输入参数，如此：</p><pre><code>        let filter = CIFilter(name: "CIQRCodeGenerator")        let inpoutkeys = filter?.inputKeys ///查看这个filter的所有输入参数        let outputKeys = filter?.outputKeys ///查看这个filter的所有输出参数        print("inpoutkeys:",inpoutkeys)        print("outputKeys:",outputKeys)</code></pre><p>设置参数用<code>KVC</code>来设置，常用的<code>key</code>，系统已经作为常量给出，可以<code>cmd</code>加鼠标左键点击<code>CIFilter</code>类名进去查看。<br>如上，二维码生成器滤镜需要量输入参数：</p><pre><code>///eg.1 ///示例代码KVO        /// 1. 实例化二维码滤镜        let filter = CIFilter(name: "CIQRCodeGenerator")///二维码        /// 2. 恢复滤镜的默认属性 ///值得注意        filter?.setDefaults()        /// 3. 将字符串转换成二进制数据，（生成二维码所需的数据）        let string = "hello word"        let data = string.data(using: String.Encoding.utf8)///Swift 3.0        /// 4. 通过KVO把二进制数据添加到滤镜inputMessage中        filter?.setValue(data, forKey: "inputMessage")        filter?.setValue("H", forKey: "inputCorrectionLevel")        /// 5. 获得滤镜输出的图像        let outputImage = filter?.outputImage ///CIImage        /// 6. 将CIImage转换成UIImage，并放大显示        //let originQRCodeImage = UIImage(ciImage: outputImage!, scale: 0.07, orientation: UIImageOrientation.up) ///原生二维码图片 ///这样将图片放大会变得模糊</code></pre>这样得到的<code>originQRCodeImage</code>是模糊的，把<code>scale</code>设为一时得到实际大小，但太小。在上篇文章我提过，需要进行重绘（效果80分）。这里我们可以使用缩放滤镜来缩放。生产高质量的、按比例缩放的源图像的版本（这是文档说明，然我并没发现有啥牛掰，还是模糊）。<code>CIFilter</code>为<code>"CILanczosScaleTransform"</code>(兰索斯缩放变化滤镜)，但为了达到彩色的效果我们先把颜色滤镜加上，<code>CIFliter</code>为<code>"CIFalseColor"</code>(伪色滤镜)：<pre><code> let colorFilter = CIFilter(name: "CIFalseColor")///颜色滤镜        colorFilter!.setDefaults()        colorFilter!.setValue(outputImage            , forKey:kCIInputImageKey)        colorFilter!.setValue(CIColor(red: 33.0 / 225.0, green: 192.0 / 225.0, blue: 174.0 / 225.0, alpha: 1.0), forKey:"inputColor0")///二维码元素（像素）        colorFilter!.setValue(CIColor(red: 1.0, green: 1.0, blue: 1.0, alpha: 1), forKey:"inputColor1")///背景        let colorImgae = colorFilter!.outputImage</code></pre><pre><code> let scaleFilter = CIFilter(name: "CILanczosScaleTransform") ///兰索斯缩放变化滤镜        scaleFilter?.setDefaults()        scaleFilter?.setValue(colorImgae, forKey: kCIInputImageKey)        scaleFilter?.setValue(1.0, forKey: kCIInputScaleKey)        scaleFilter?.setValue(1.0, forKey: kCIInputAspectRatioKey)        let scaleImage = scaleFilter?.outputImage</code></pre><p>所以通过添加锐化滤镜来锐化一下，<code>CIFilter</code>为<code>“CISharpenLuminance”</code>(亮度锐化，对光度有作用，度色度没影响)：</p><pre><code> let sharpenFilter = CIFilter(name: "CISharpenLuminance") ///细节锐化滤镜        ///It operates on the luminance of the image; the chrominance of the pixels remains unaffected.        sharpenFilter?.setDefaults()        sharpenFilter?.setValue(scaleImage, forKey: kCIInputImageKey)        sharpenFilter?.setValue(10.0, forKey: kCIInputSharpnessKey)        let sharpenImage = sharpenFilter?.outputImage</code></pre><p>最后得到图片：</p><pre><code>let newQRCodeImage = UIImage(ciImage: sharpenImage!)        let imgBtn = UIButton(type: .custom)        imgBtn.frame = self.view.frame        imgBtn.setImage(newQRCodeImage, for: .normal)        self.view.addSubview(imgBtn)</code></pre><p>通过参数的设置，得到的图片效果70分；</p><p>而在进行重绘后，再进行锐化处理的话，你就会发现效果是真的不错（95分）。</p><p>因为升为了Switft3.0代码，所以代码需要少量修改。主要就是Swift3.0把<code>CoreGraphics</code>的全局方法改为了实例方法，</p><pre><code>func createUIimageWithCGImage(ciImage image: CIImage, widthAndHeightValue wh: CGFloat) -> CIImage {        let ciRect = image.extent.integral///根据容器得到适合的尺寸        let scale = min(wh / ciRect.width, wh / ciRect.height)        ///获取bitmap        let width  = size_t(ciRect.width * scale)        let height  = size_t(ciRect.height * scale)        let cs = CGColorSpaceCreateDeviceGray()///灰度颜色通道 ///CGColorSpaceRef        let info_UInt32 = CGImageAlphaInfo.none.rawValue        let bitmapRef = CGContext(data: nil, width: width, height: height, bitsPerComponent: 8, bytesPerRow: 0, space: cs, bitmapInfo: info_UInt32)        let contex = CIContext(options: nil) ///  创建基于GPU的CIContext对象,性能和效果更好        let bitmapImageRef = contex.createCGImage(image, from: CGRect(x: ciRect.origin.x, y: ciRect.origin.y, width: ciRect.size.width, height: ciRect.size.height)) ///CGImageRef        ///swift 3.0, 把全局方法改为了实例方法        bitmapRef!.interpolationQuality = CGInterpolationQuality.high///写入质量高，时间长        bitmapRef!.scaleBy(x: scale, y: scale) ///调整“画布”的缩放        bitmapRef?.draw(bitmapImageRef!, in: ciRect, byTiling: true)///绘制图片        ///保存        let scaledImage = bitmapRef!.makeImage() ///cgimage        ///bitmapRef和bitmapImageRef不用主动释放，Core Foundation自动管理        //let originImage = UIImage(CGImage: scaledImage!) ///原生灰度图片（灰色）        let ciImage = CIImage(cgImage: scaledImage!) ///ciimage        //let newQRCodeImage = UIImage(cgImage: scaledImage!) ///uiimage        return ciImage    }</code></pre><p>附录：</p><pre>    ///附：你要是细心，或者有点好奇心，你可能会问，为什么我们看到的二维码中间都有一个小图片，    ///确实现在的大多二维码生成工具都喜欢中间贴上一个小图，但是上述生成的二维码并没有，    ///其实这很简单，这也是我没有在这个小问题给出示例的原因。其实二维码在缺少小部分的情况下，并不影响存储信息的完整性    ///所以小图片是另外加上去的，只是遮掉了一小块二维码内容，这并不影响什么。    ///然而在一张图上添加另一张图，相信你也觉得这并不是什么问题。自己试试吧。    ///如：用<code>quartz2D</code> <code>drawimga</code>的方法即可。</pre><p><img src="/CIFilter介绍/result_image.png" alt="结果图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上篇文章&lt;a href=&quot;http://www.jianshu.com/p/7b0def7c2e74&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iOS_最全的二维码篇&lt;/a&gt;说要给大家简绍一下强大而好玩工具&lt;code&gt;CIFilter&lt;/code&gt;,所
      
    
    </summary>
    
      <category term="iOS" scheme="https://JornWu.github.io/categories/iOS/"/>
    
    
      <category term="Swift" scheme="https://JornWu.github.io/tags/Swift/"/>
    
      <category term="CIFilter" scheme="https://JornWu.github.io/tags/CIFilter/"/>
    
      <category term="QRCode" scheme="https://JornWu.github.io/tags/QRCode/"/>
    
  </entry>
  
  <entry>
    <title>iOS_最全的二维码篇</title>
    <link href="https://JornWu.github.io/2016/09/17/iOS/cjsymdu5e000ippsg1bw8r3py.html"/>
    <id>https://JornWu.github.io/2016/09/17/iOS/cjsymdu5e000ippsg1bw8r3py.html</id>
    <published>2016-09-17T11:09:38.000Z</published>
    <updated>2019-03-06T16:00:17.857Z</updated>
    
    <content type="html"><![CDATA[<p>二维码扫面当下很流行，也带来了很多的便利。我也不是在吹捧，你也许你也发现，几乎凡是个APP，都有扫描二维码的功能。现在网上的资料很多，我也是闲的蛋疼，在做一个<a href="https://github.com/JornWu/MeiTuan_Swift" target="_blank" rel="noopener">美团的高仿项目</a>，涉及到二维码的扫描功能，iOS7之前，开发者进行扫码编程时，一般会借助第三方库。常用的是ZBarSDKa和ZXingObjC，iOS7之后，系统的AVMetadataObject类中，为我们提供了解析二维码的接口。经过测试，使用原生API扫描和处理的效率非常高，远远高于第三方库。我查了很多的资料，网上关于用系统原生类来实现二维码扫描的资料还是很多的，但都不是很全。所以我把一套功能的实现分享出来，希望你们喜欢。</p><h3 id="这里包含："><a href="#这里包含：" class="headerlink" title="这里包含："></a>这里包含：</h3><ul><li>1、窗口的搭建</li><li>2、二维码的扫描</li><li>3、从相册中读取二维码</li><li>4、生成二维码</li><li>5、长按识别二维码</li></ul><p>其中二维码的扫描主要是用到AVFoundation这个框架中的AVCaptureSession，读取二维码和识别二维码是同个原理，只是处理方式不同，主要用到的是CIDetector类，而生成二维码要用到CoreImage框架中的CIFilter滤镜类，值得一提的是CoreImage非常强大，这是iOS中关于图片处理的几乎所有内容集合，即图片的处理几乎都在CoreImage中，CIFilter也非常值得一究，mac上应该在CoreQuartz中。CoreImage和CIFilter的内容很多，我可能会在另外的文章中去分享。（我并不是大神，不敢吹牛逼说给大家讲解，只是分享和大家相互学习）</p><p>详情看看我的源码：<br><a href="https://github.com/JornWu/MeiTuan_Swift" target="_blank" rel="noopener">美团的高仿项目</a> 更多模块中的“扫一扫”</p><hr><h2 id="1、窗口的搭建"><a href="#1、窗口的搭建" class="headerlink" title="1、窗口的搭建"></a>1、窗口的搭建</h2><p>这是UI的东西，很简单，想怎么弄就怎么弄，只要你happy就ok，这是我的代码：</p><p>1.1、设置导航条：setupNavView()，editItemAction()中因为在iOS9+平台，所以用UIAlertController来列出多个ActionSheet功能</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">func setupNavView() &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">self.navigationController?.navigationBar.barTintColor = UIColor.clearColor()</span></span><br><span class="line"><span class="attribute">        self.title = "二维码/条形码"</span></span><br><span class="line"><span class="attribute">        //设置标题颜色</span></span><br><span class="line"><span class="attribute">        let navigationTitleAttribute = NSDictionary(object</span>: UIColor<span class="variable">.whiteColor</span>(), forKey: NSForegroundColorAttributeName)</span><br><span class="line">        self<span class="variable">.navigationController</span>?<span class="variable">.navigationBar</span><span class="variable">.titleTextAttributes</span> = navigationTitleAttribute as? [String : AnyObject]</span><br><span class="line">        </span><br><span class="line">        //1.返回</span><br><span class="line">        let backBtn = UIButton(type: UIButtonType<span class="variable">.Custom</span>)</span><br><span class="line">        backBtn<span class="variable">.frame</span> = CGRectMake(20, 30, 25, 25);</span><br><span class="line">        </span><br><span class="line">        <span class="attribute">backBtn.setBackgroundImage(UIImage(named</span>: "qrcode_scan_titlebar_back_nor"), forState:UIControlState<span class="variable">.Normal</span>);</span><br><span class="line">        <span class="attribute">backBtn.contentMode = UIViewContentMode.ScaleAspectFit</span></span><br><span class="line"><span class="attribute">        backBtn.addTarget(self, action</span>: #selector(QRCodeScanViewController<span class="variable">.backBtnAction</span>), forControlEvents: UIControlEvents<span class="variable">.TouchUpInside</span>)</span><br><span class="line">        </span><br><span class="line">        let backItem = UIBarButtonItem(customView: backBtn)</span><br><span class="line">        self<span class="variable">.navigationItem</span><span class="variable">.leftBarButtonItem</span> = backItem</span><br><span class="line">        </span><br><span class="line">        let editItem = UIBarButtonItem(barButtonSystemItem: <span class="variable">.Edit</span>, target: self, action: #selector(QRCodeScanViewController<span class="variable">.editItemAction</span>))</span><br><span class="line">        self<span class="variable">.navigationItem</span><span class="variable">.rightBarButtonItem</span> = editItem</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">       //  deprecated  //</span><br><span class="line">//        //2.相册</span><br><span class="line">//        let albumBtn = UIButton(type: UIButtonType<span class="variable">.Custom</span>)</span><br><span class="line">//        albumBtn<span class="variable">.frame</span> = CGRectMake(0, 0, 35, 49)</span><br><span class="line">//        albumBtn<span class="variable">.center</span> = CGPointMake(self<span class="variable">.view</span><span class="variable">.bounds</span><span class="variable">.width</span> / 2, 20 + 49 / 2.0)</span><br><span class="line">//        albumBtn<span class="variable">.setBackgroundImage</span>(UIImage(named: "qrcode_scan_btn_photo_down"), forState: UIControlState<span class="variable">.Normal</span>)</span><br><span class="line">//        albumBtn<span class="variable">.contentMode</span>=UIViewContentMode<span class="variable">.ScaleAspectFit</span></span><br><span class="line">//        albumBtn<span class="variable">.addTarget</span>(self, action: #selector(QRCodeScanViewController<span class="variable">.openAlbum</span>), forControlEvents: UIControlEvents<span class="variable">.TouchUpInside</span>)//        self<span class="variable">.view</span><span class="variable">.addSubview</span>(albumBtn)</span><br><span class="line">//        </span><br><span class="line">//        //3.闪光灯</span><br><span class="line">//        let flashBtn = UIButton(type: UIButtonType<span class="variable">.Custom</span>)</span><br><span class="line">//        flashBtn<span class="variable">.frame</span> = CGRectMake(self<span class="variable">.view</span><span class="variable">.bounds</span><span class="variable">.width</span> - 55, 20, 35, 49)</span><br><span class="line">//        flashBtn<span class="variable">.setBackgroundImage</span>(UIImage(named: "qrcode_scan_btn_flash_down"), forState: UIControlState<span class="variable">.Normal</span>)</span><br><span class="line">//        flashBtn<span class="variable">.contentMode</span>=UIViewContentMode<span class="variable">.ScaleAspectFit</span></span><br><span class="line">//        flashBtn<span class="variable">.addTarget</span>(self, action: #selector(QRCodeScanViewController<span class="variable">.openFlash</span>(_:)), forControlEvents: UIControlEvents<span class="variable">.TouchUpInside</span>)</span><br><span class="line">//        self<span class="variable">.view</span><span class="variable">.addSubview</span>(flashBtn)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">editItemAction</span><span class="params">()</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> actionSheet = <span class="type">UIAlertController</span>(title: <span class="literal">nil</span>, message: <span class="literal">nil</span>, preferredStyle: .<span class="type">ActionSheet</span>)</span><br><span class="line">        <span class="keyword">let</span> action1 = <span class="type">UIAlertAction</span>(title: <span class="string">"从相册选取二维码"</span>, style: .<span class="type">Default</span>) &#123;</span><br><span class="line">            [<span class="keyword">unowned</span> <span class="keyword">self</span>]</span><br><span class="line">            (act) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span>.openAlbum()</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> action2 = <span class="type">UIAlertAction</span>(title: <span class="string">"打开闪光灯"</span>, style: .<span class="type">Default</span>) &#123;</span><br><span class="line">            [<span class="keyword">unowned</span> <span class="keyword">self</span>]</span><br><span class="line">            (act) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span>.openFlash()</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> action3 = <span class="type">UIAlertAction</span>(title: <span class="string">"生成二维码"</span>, style: .<span class="type">Default</span>) &#123;</span><br><span class="line">            [<span class="keyword">unowned</span> <span class="keyword">self</span>]</span><br><span class="line">            (act) <span class="keyword">in</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">let</span> inputVC = <span class="type">UIAlertController</span>(title: <span class="string">"输入信息"</span>, message: <span class="literal">nil</span>, preferredStyle: .<span class="type">Alert</span>)</span><br><span class="line">            <span class="keyword">let</span> cancelAction = <span class="type">UIAlertAction</span>(title: <span class="string">"取消"</span>, style: .<span class="type">Cancel</span>, handler: <span class="literal">nil</span>)</span><br><span class="line">            <span class="keyword">let</span> okayAction = <span class="type">UIAlertAction</span>(title: <span class="string">"确定"</span>, style: .<span class="type">Default</span>)&#123;</span><br><span class="line">                [<span class="keyword">unowned</span> <span class="keyword">self</span>]</span><br><span class="line">                (act) <span class="keyword">in</span></span><br><span class="line">                <span class="comment">///生成二维码图片</span></span><br><span class="line">                <span class="keyword">let</span> <span class="type">QRCodeImage</span> = <span class="keyword">self</span>.createQRCodeImage(withImage: <span class="type">UIImage</span>(named: <span class="string">"icon_mine_default_portrait"</span>)!, string: <span class="keyword">self</span>.textInfo!)</span><br><span class="line">                </span><br><span class="line">                <span class="comment">///展示在界面上</span></span><br><span class="line">                <span class="keyword">let</span> imageBtn = <span class="type">UIButton</span>(frame: <span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">64</span>, <span class="type">SCREENWIDTH</span>, <span class="type">SCREENHEIGHT</span> - <span class="number">64</span>))</span><br><span class="line">                imageBtn.setImage(<span class="type">QRCodeImage</span>, forState: .<span class="type">Normal</span>)</span><br><span class="line">                imageBtn.addTarget(<span class="keyword">self</span>, action: #selector(<span class="keyword">self</span>.imageBtnAction(<span class="number">_</span>:)), forControlEvents: .<span class="type">TouchUpInside</span>)</span><br><span class="line">                imageBtn.backgroundColor = <span class="type">THEMECOLOR</span></span><br><span class="line">                <span class="keyword">self</span>.view.addSubview(imageBtn)</span><br><span class="line">                </span><br><span class="line">                <span class="comment">///保存到相册</span></span><br><span class="line">                <span class="comment">//UIImageWriteToSavedPhotosAlbum(QRCodeImage, self, #selector(self.image(_: didFinishSavingWithError: contextInfo: )), nil)</span></span><br><span class="line">                </span><br><span class="line">                inputVC.dismissViewControllerAnimated(<span class="literal">true</span>, completion: &#123; </span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"生成二维码"</span>)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            inputVC.addAction(cancelAction)</span><br><span class="line">            inputVC.addAction(okayAction)</span><br><span class="line">            </span><br><span class="line">            inputVC.addTextFieldWithConfigurationHandler(&#123; (textField) <span class="keyword">in</span></span><br><span class="line">                textField.borderStyle = .<span class="type">None</span></span><br><span class="line">                textField.placeholder = <span class="string">"输入需要保存的信息"</span></span><br><span class="line">                textField.delegate = <span class="keyword">self</span></span><br><span class="line">                textField.becomeFirstResponder()</span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">self</span>.presentViewController(inputVC, animated: <span class="literal">true</span>, completion: &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"输入信息可以生成二维码"</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> action4 = <span class="type">UIAlertAction</span>(title: <span class="string">"取消"</span>, style: .<span class="type">Cancel</span>, handler: <span class="literal">nil</span>)</span><br><span class="line">        </span><br><span class="line">        actionSheet.addAction(action1)</span><br><span class="line">        actionSheet.addAction(action2)</span><br><span class="line">        actionSheet.addAction(action3)</span><br><span class="line">        actionSheet.addAction(action4)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span>.presentViewController(actionSheet, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>1.3、遮罩（蒙板）的设置：setupMaskView()</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">let kMargin = <span class="built_in">CGFloat</span>(<span class="number">50</span>)</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   func setupMaskView() &#123;</span><br><span class="line">       </span><br><span class="line">       maskView = <span class="built_in">UIView</span>()</span><br><span class="line">       maskView.layer.borderColor = <span class="built_in">UIColor</span>(red: <span class="built_in">CGFloat</span>(<span class="number">0</span>), green: <span class="built_in">CGFloat</span>(<span class="number">0</span>), blue: <span class="built_in">CGFloat</span>(<span class="number">0</span>), alpha: <span class="built_in">CGFloat</span>(<span class="number">0.7</span>)).CGColor</span><br><span class="line">       maskView.layer.borderWidth = kMargin</span><br><span class="line">       </span><br><span class="line">       let maskViewSize = <span class="built_in">CGSizeMake</span>(<span class="keyword">self</span>.view.extWidth(), <span class="keyword">self</span>.view.extWidth())<span class="comment">///正方形，下面会露出来，还要添加补充遮罩</span></span><br><span class="line">       maskView.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">64</span>, maskViewSize.width, maskViewSize.height)</span><br><span class="line">       <span class="keyword">self</span>.view.addSubview(maskView)</span><br><span class="line">       </span><br><span class="line">       <span class="comment">///补充遮罩</span></span><br><span class="line">       let mask = <span class="built_in">UIView</span>(frame: <span class="built_in">CGRectMake</span>(<span class="number">0</span>, maskView.extY() + maskView.extHeight(), SCREENWIDTH, SCREENHEIGHT - (maskView.extY() + maskView.extHeight())))</span><br><span class="line">       mask.backgroundColor = <span class="built_in">UIColor</span>(red: <span class="built_in">CGFloat</span>(<span class="number">0</span>), green: <span class="built_in">CGFloat</span>(<span class="number">0</span>), blue: <span class="built_in">CGFloat</span>(<span class="number">0</span>), alpha: <span class="built_in">CGFloat</span>(<span class="number">0.7</span>))</span><br><span class="line">       <span class="keyword">self</span>.view.addSubview(mask)</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>1.4、扫描区域的设置：setupScanWindowView()</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">func</span> setupScanWindowView() &#123;</span><br><span class="line">       </span><br><span class="line">       let scanWindowH = maskView.extWidth() - kMargin * <span class="number">2</span> ///kMargin为黑色边框的一半，</span><br><span class="line">       let scanWindowW = scanWindowH</span><br><span class="line">       </span><br><span class="line">       scanWindow =  UIView(frame: CGRectMake(kMargin, kMargin + <span class="number">64</span>, scanWindowW, scanWindowH))///隐形的框</span><br><span class="line">       scanWindow.clipsToBounds = true</span><br><span class="line">       <span class="keyword">self.view.addSubview(scanWindow)</span></span><br><span class="line"><span class="keyword"> </span>      </span><br><span class="line">       scanNetImageView = UIImageView(image: UIImage(named: <span class="string">"scan_net"</span>))</span><br><span class="line">       scanNetImageView.extSetY(-<span class="number">1</span> * scanNetImageView.extHeight())</span><br><span class="line">       scanWindow.<span class="keyword">addSubview(scanNetImageView)</span></span><br><span class="line"><span class="keyword"> </span>      </span><br><span class="line">       let <span class="keyword">buttonWH </span>= CGFloat(<span class="number">18</span>)</span><br><span class="line">       let topLift = UIImageView(frame: CGRectMake(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">buttonWH, </span><span class="keyword">buttonWH))</span></span><br><span class="line"><span class="keyword"> </span>      topLift.image = UIImage(named: <span class="string">"scan_1"</span>)</span><br><span class="line">       let topRight = UIImageView(frame: CGRectMake(scanWindowW - <span class="keyword">buttonWH, </span><span class="number">0</span>, <span class="keyword">buttonWH, </span><span class="keyword">buttonWH))</span></span><br><span class="line"><span class="keyword"> </span>      topRight.image = UIImage(named: <span class="string">"scan_2"</span>)</span><br><span class="line">       let <span class="keyword">bottomLeft </span>= UIImageView(frame: CGRectMake(<span class="number">0</span>, scanWindowH - <span class="keyword">buttonWH, </span><span class="keyword">buttonWH, </span><span class="keyword">buttonWH))</span></span><br><span class="line"><span class="keyword"> </span>      <span class="keyword">bottomLeft.image </span>= UIImage(named: <span class="string">"scan_3"</span>)</span><br><span class="line">       let <span class="keyword">bottomRight </span>= UIImageView(frame: CGRectMake(topRight.frame.origin.x, <span class="keyword">bottomLeft.frame.origin.y, </span><span class="keyword">buttonWH, </span><span class="keyword">buttonWH))</span></span><br><span class="line"><span class="keyword"> </span>      <span class="keyword">bottomRight.image </span>= UIImage(named: <span class="string">"scan_4"</span>)</span><br><span class="line">       </span><br><span class="line">       scanWindow.<span class="keyword">addSubview(topLift)</span></span><br><span class="line"><span class="keyword"> </span>      scanWindow.<span class="keyword">addSubview(topRight)</span></span><br><span class="line"><span class="keyword"> </span>      scanWindow.<span class="keyword">addSubview(bottomLeft)</span></span><br><span class="line"><span class="keyword"> </span>      scanWindow.<span class="keyword">addSubview(bottomRight)</span></span><br><span class="line"><span class="keyword"> </span>      </span><br><span class="line">       <span class="keyword">self.view.addSubview(scanWindow)</span></span><br><span class="line"><span class="keyword"> </span>  &#125;</span><br></pre></td></tr></table></figure><h2 id="2、二维码的扫描"><a href="#2、二维码的扫描" class="headerlink" title="2、二维码的扫描"></a>2、二维码的扫描</h2><p>主要用的的是AVCaptureSession类，然后设置input和output即可，值得一提的是扫码支持的类型：output.metadataObjectTypes。iOS已经提供了很多，但是并不全，不过包含了常用的二维码AVMetadataObjectTypeQRCode和条形码AVMetadataObjectTypeCode128Code等</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">func beginScanning() &#123;<span class="comment">///要真机</span></span><br><span class="line">        <span class="comment">///模拟图片动起来</span></span><br><span class="line">        <span class="comment">///way 1、UIView Animation</span></span><br><span class="line">        <span class="built_in">UIView</span>.animateWithDuration(<span class="number">1.5</span>, delay: <span class="number">0</span>, options: <span class="built_in">UIViewAnimationOptions</span>.Repeat, animations: &#123;</span><br><span class="line">            [unowned <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span>.scanNetImageView.transform = <span class="built_in">CGAffineTransformTranslate</span>(<span class="keyword">self</span>.scanNetImageView.transform, <span class="number">0</span>, <span class="keyword">self</span>.scanWindow.extHeight())</span><br><span class="line">            &#125;, completion: <span class="literal">nil</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">///way 2、coreAnimation</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//初始化链接对象</span></span><br><span class="line">        session = <span class="built_in">AVCaptureSession</span>()</span><br><span class="line">        <span class="comment">//高质量采集率</span></span><br><span class="line">        session.sessionPreset = <span class="built_in">AVCaptureSessionPresetHigh</span></span><br><span class="line">        </span><br><span class="line">        let preLayer = <span class="built_in">AVCaptureVideoPreviewLayer</span>(session: session)<span class="comment">///注意session存放的地方</span></span><br><span class="line">        preLayer.frame = <span class="keyword">self</span>.view.bounds</span><br><span class="line">        <span class="keyword">self</span>.view.layer.insertSublayer(preLayer, atIndex: <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * AVCaptureDevice 获取摄像设备</span></span><br><span class="line"><span class="comment">         * AVCaptureDeviceInput 创建输入流</span></span><br><span class="line"><span class="comment">         * AVCaptureMetadataOutput 创建输出了</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        </span><br><span class="line">        let device = <span class="built_in">AVCaptureDevice</span>.defaultDeviceWithMediaType(<span class="built_in">AVMediaTypeVideo</span>)</span><br><span class="line">        var input: <span class="built_in">AVCaptureDeviceInput</span>?</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            </span><br><span class="line">            input = try <span class="built_in">AVCaptureDeviceInput</span>(device: device)</span><br><span class="line">            <span class="comment">///add input</span></span><br><span class="line">            </span><br><span class="line">        &#125;catch let error as <span class="built_in">NSError</span> &#123;</span><br><span class="line">            <span class="comment">// 发生了错误</span></span><br><span class="line">            print(error.localizedDescription)</span><br><span class="line">        &#125;</span><br><span class="line">        catch &#123;</span><br><span class="line">            print(<span class="string">"--input未知错误--"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">///add input</span></span><br><span class="line">        session.addInput(input)</span><br><span class="line">        </span><br><span class="line">        let output = <span class="built_in">AVCaptureMetadataOutput</span>()</span><br><span class="line">        <span class="comment">///add delegate</span></span><br><span class="line">        output.setMetadataObjectsDelegate(<span class="keyword">self</span>, queue: dispatch_get_main_queue())<span class="comment">//主队列（主线程）</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">///设置“感兴趣”区域（敏感区域）</span></span><br><span class="line">        let interestRect = preLayer.metadataOutputRectOfInterestForRect(scanWindow.frame)<span class="comment">///扫描区 到 metadata输出区</span></span><br><span class="line">        <span class="comment">///值等于CGRectMake(scanWindow.extY() / SCREENHEIGHT, scanWindow.extX() / SCREENWIDTH, scanWindow.extHeight() / SCREENHEIGHT, scanWindow.extWidth() / SCREENWIDTH)</span></span><br><span class="line">        <span class="comment">///把一个在 preview layer 坐标系中的rect 转换成一个在 metadata output 坐标系中的rect</span></span><br><span class="line">        </span><br><span class="line">        output.rectOfInterest = interestRect <span class="comment">///注意，这个并不是扫描区的坐标尺寸</span></span><br><span class="line">        </span><br><span class="line">        session.addOutput(output)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置扫码支持的类型</span></span><br><span class="line">        output.metadataObjectTypes = [<span class="built_in">AVMetadataObjectTypeDataMatrixCode</span>,</span><br><span class="line">                                      <span class="built_in">AVMetadataObjectTypeAztecCode</span>,</span><br><span class="line">                                      <span class="built_in">AVMetadataObjectTypeQRCode</span>,</span><br><span class="line">                                      <span class="built_in">AVMetadataObjectTypePDF417Code</span>, </span><br><span class="line">                                      <span class="built_in">AVMetadataObjectTypeEAN13Code</span>,</span><br><span class="line">                                      <span class="built_in">AVMetadataObjectTypeEAN8Code</span>,</span><br><span class="line">                                      <span class="built_in">AVMetadataObjectTypeCode128Code</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment">///常用的码制有：PDF417二维条码、Datamatrix二维条码、QR Code、Code 49、Code 16K、Code one等，</span></span><br><span class="line">        <span class="comment">///除了这些常见的二维条码之外，还有Vericode条码、Maxicode条码、CP条码、Codablock F条码、 Ultracode条码及Aztec条码。</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">///start grab</span></span><br><span class="line">        session.startRunning()</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3、从相册中读取二维码"><a href="#3、从相册中读取二维码" class="headerlink" title="3、从相册中读取二维码"></a>3、从相册中读取二维码</h2><p>主要用到的是CIDetector检测器类，然后获取feature对象。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********照片读取**************/</span></span><br><span class="line">    </span><br><span class="line">    func openAlbum()&#123;<span class="comment">//相册</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">UIImagePickerController</span>.isSourceTypeAvailable(<span class="built_in">UIImagePickerControllerSourceType</span>.PhotoLibrary))&#123;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">///1.初始化相册拾取器</span></span><br><span class="line">            let pikController = <span class="built_in">UIImagePickerController</span>()</span><br><span class="line">            <span class="comment">///2.设置代理</span></span><br><span class="line">            pikController.delegate = <span class="keyword">self</span><span class="comment">//两个代理</span></span><br><span class="line">            <span class="comment">//3.设置资源：</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">            UIImagePickerControllerSourceTypePhotoLibrary,相册</span></span><br><span class="line"><span class="comment">            UIImagePickerControllerSourceTypeCamera,相机</span></span><br><span class="line"><span class="comment">            UIImagePickerControllerSourceTypeSavedPhotosAlbum,照片库</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            pikController.sourceType = <span class="built_in">UIImagePickerControllerSourceType</span>.SavedPhotosAlbum</span><br><span class="line">            <span class="comment">//4.随便给他一个转场动画</span></span><br><span class="line">            pikController.modalTransitionStyle = <span class="built_in">UIModalTransitionStyle</span>.FlipHorizontal</span><br><span class="line">            <span class="keyword">self</span>.presentViewController(pikController, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            </span><br><span class="line">            let alertVC = <span class="built_in">UIAlertController</span>(title: <span class="string">"提示"</span>, message: <span class="string">"设备不支持访问相册，请在设置-&gt;隐私-&gt;照片中进行设置！"</span>, preferredStyle: <span class="built_in">UIAlertControllerStyle</span>.Alert)</span><br><span class="line">            let action = <span class="built_in">UIAlertAction</span>(title: <span class="string">"OK"</span>, style: .Cancel, handler: <span class="literal">nil</span>)</span><br><span class="line">            alertVC.addAction(action)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">self</span>.presentViewController(alertVC, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">///imagePickerControllerdelegate func</span></span><br><span class="line">    func imagePickerController(picker: <span class="built_in">UIImagePickerController</span>, didFinishPickingMediaWithInfo info: [String : AnyObject]) &#123;</span><br><span class="line">        <span class="comment">///1.获取选择的图片</span></span><br><span class="line">        let image = info[<span class="built_in">UIImagePickerControllerOriginalImage</span>]</span><br><span class="line">        <span class="comment">///2.初始化一个监测器</span></span><br><span class="line">        let detector = <span class="built_in">CIDetector</span>(ofType: <span class="built_in">CIDetectorTypeQRCode</span>, context: <span class="literal">nil</span>, options: [ <span class="built_in">CIDetectorAccuracy</span> : <span class="built_in">CIDetectorAccuracyHigh</span> ])</span><br><span class="line">        picker.dismissViewControllerAnimated(<span class="literal">true</span>) &#123; () -&gt; Void <span class="keyword">in</span></span><br><span class="line">            <span class="comment">///监测到的结果数组</span></span><br><span class="line">            let features = detector.featuresInImage(<span class="built_in">CIImage</span>(<span class="built_in">CGImage</span>: (image?.CGImage)!))</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> features.count &gt;= <span class="number">1</span> &#123;</span><br><span class="line">                <span class="comment">/**结果对象 */</span></span><br><span class="line">                <span class="comment">///CIQRCodeFeature</span></span><br><span class="line">                let feature = features[<span class="number">0</span>] as! <span class="built_in">CIQRCodeFeature</span></span><br><span class="line">                let scannedResult = feature.messageString</span><br><span class="line">                </span><br><span class="line">                let alertVC = <span class="built_in">UIAlertController</span>(title: <span class="string">"提示"</span>, message: scannedResult, preferredStyle: <span class="built_in">UIAlertControllerStyle</span>.Alert)</span><br><span class="line">                <span class="keyword">self</span>.presentViewController(alertVC, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                let alertVC = <span class="built_in">UIAlertController</span>(title: <span class="string">"提示"</span>, message: <span class="string">"该图片没有包含一个二维码！"</span>, preferredStyle: <span class="built_in">UIAlertControllerStyle</span>.Alert)</span><br><span class="line">                let action = <span class="built_in">UIAlertAction</span>(title: <span class="string">"OK"</span>, style: .Cancel, handler: <span class="literal">nil</span>)</span><br><span class="line">                alertVC.addAction(action)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">self</span>.presentViewController(alertVC, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4、生成二维码"><a href="#4、生成二维码" class="headerlink" title="4、生成二维码"></a>4、生成二维码</h2><p>生成二维码处理过程有点复杂，首先要导入CoreImage，然后用CIFilter生成图片，name为CIQRCodeGenerator就是二维码滤镜，CICode128BarcodeGenerator就是条形码滤镜，当然还有很多滤镜，如下面会用到的颜色滤镜name为CIFalseColor。</p><p>4.1、原生二维码的生成<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********生成二维码图片**************/</span> <span class="comment">///coreImage</span></span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="title">createQRCodeImage</span><span class="params">(withImage image: UIImage, string: String)</span></span> -&gt; <span class="type">UIImage</span> &#123;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">/// 1. 实例化二维码滤镜</span></span><br><span class="line">       <span class="keyword">let</span> <span class="built_in">filter</span> = <span class="type">CIFilter</span>(name: <span class="string">"CIQRCodeGenerator"</span>)<span class="comment">///CICode128BarcodeGenerator ///条形码</span></span><br><span class="line">       <span class="comment">///注意</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">/// 2. 恢复滤镜的默认属性</span></span><br><span class="line">       <span class="built_in">filter</span>?.setDefaults()</span><br><span class="line">       </span><br><span class="line">       <span class="comment">/// 3. 将字符串转换成二进制数据，（生成二维码所需的数据）</span></span><br><span class="line">       <span class="keyword">let</span> data = string.dataUsingEncoding(<span class="type">NSUTF8StringEncoding</span>)</span><br><span class="line">       </span><br><span class="line">       <span class="comment">/// 4. 通过KVO把二进制数据添加到滤镜inputMessage中</span></span><br><span class="line">       <span class="built_in">filter</span>?.setValue(data, forKey: <span class="string">"inputMessage"</span>)</span><br><span class="line">       <span class="built_in">filter</span>?.setValue(<span class="string">"H"</span>, forKey: <span class="string">"inputCorrectionLevel"</span>)</span><br><span class="line">       </span><br><span class="line">       <span class="comment">/// 5. 获得滤镜输出的图像</span></span><br><span class="line">       <span class="keyword">let</span> outputImage = <span class="built_in">filter</span>?.outputImage <span class="comment">///CIImage</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">/// 6. 将CIImage转换成UIImage，并放大显示</span></span><br><span class="line">       <span class="comment">//let originQRCodeImage = UIImage(CIImage: outputImage!, scale: 0.07, orientation: UIImageOrientation.Up) ///原生二维码图片 ///这样将图片放大会变得模糊</span></span><br><span class="line">       <span class="comment">//return originQRCodeImage</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">///进行重绘</span></span><br><span class="line">       <span class="keyword">let</span> newQRCodeImage = createUIimageWithCGImage(ciImage: outputImage!, widthAndHeightValue: <span class="number">300</span>)</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> newQRCodeImage</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>如果你直接用这行代码返回图片</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let originQRCodeImage = UIImage(<span class="string">CIImage:</span> outputImage!, <span class="string">scale:</span> <span class="number">0.07</span>, <span class="string">orientation:</span> UIImageOrientation.Up) <span class="comment">///原生二维码图片 ///这样将图片放大会变得模糊</span></span><br><span class="line"><span class="keyword">return</span> originQRCodeImage</span><br></pre></td></tr></table></figure><p> 得到的图片将会很模糊，因为这是将图片进行放大了，但图片将0.07改为了1，看到的图片将会很小。 </p><p> 所以还的处理一下：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">func createUIimageWithCGImage(ciImage <span class="built_in">image</span>: CIImage, widthAndHeightValue wh: CGFloat) -&gt; UIImage &#123;</span><br><span class="line">        let ciRect = CGRectIntegral(<span class="built_in">image</span>.extent)<span class="comment">///根据容器得到适合的尺寸</span></span><br><span class="line">        let <span class="built_in">scale</span> = <span class="built_in">min</span>(wh / ciRect.<span class="built_in">width</span>, wh / ciRect.<span class="built_in">height</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">///获取bitmap</span></span><br><span class="line">        </span><br><span class="line">        let <span class="built_in">width</span>  = size_t(ciRect.<span class="built_in">width</span> * <span class="built_in">scale</span>)</span><br><span class="line">        let <span class="built_in">height</span>  = size_t(ciRect.<span class="built_in">height</span> * <span class="built_in">scale</span>)</span><br><span class="line">        let cs = CGColorSpaceCreateDeviceGray()<span class="comment">///灰度颜色通道 ///CGColorSpaceRef</span></span><br><span class="line">        </span><br><span class="line">        let info_UInt32 = CGImageAlphaInfo.None.rawValue</span><br><span class="line">        let bitmapRef = CGBitmapContextCreate(nil, <span class="built_in">width</span>, <span class="built_in">height</span>, <span class="number">8</span>, <span class="number">0</span>, cs, info_UInt32)</span><br><span class="line">        </span><br><span class="line">        let contex = CIContext(options: nil)</span><br><span class="line">        let bitmapImageRef = contex.createCGImage(<span class="built_in">image</span>, fromRect: CGRectMake(ciRect.origin.x, ciRect.origin.y, ciRect.<span class="built_in">size</span>.<span class="built_in">width</span>, ciRect.<span class="built_in">size</span>.<span class="built_in">height</span>)) <span class="comment">///CGImageRef</span></span><br><span class="line">        </span><br><span class="line">        CGContextSetInterpolationQuality(bitmapRef, CGInterpolationQuality.High)<span class="comment">///写入质量高，时间长</span></span><br><span class="line">        CGContextScaleCTM(bitmapRef, <span class="built_in">scale</span>, <span class="built_in">scale</span>) <span class="comment">///调整“画布”的缩放</span></span><br><span class="line">        CGContextDrawImage(bitmapRef, ciRect, bitmapImageRef) <span class="comment">///绘制图片</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">///保存</span></span><br><span class="line">        let scaledImage = CGBitmapContextCreateImage(bitmapRef)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">///bitmapRef和bitmapImageRef不用主动释放，Core Foundation自动管理</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//let originImage = UIImage(CGImage: scaledImage!) ///原生灰度图片（灰色）</span></span><br><span class="line">        </span><br><span class="line">        let ciImage = CIImage(CGImage: scaledImage!)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">///添加滤镜</span></span><br><span class="line">        let colorFilter = CIFilter(name: <span class="string">"CIFalseColor"</span>)<span class="comment">///颜色滤镜</span></span><br><span class="line">        colorFilter!.setDefaults()</span><br><span class="line">        colorFilter!.setValue(ciImage, forKey:kCIInputImageKey)</span><br><span class="line">        </span><br><span class="line">        colorFilter!.setValue(CIColor(<span class="built_in">red</span>: <span class="number">33.0</span> / <span class="number">225.0</span>, <span class="built_in">green</span>: <span class="number">192.0</span> / <span class="number">225.0</span>, <span class="built_in">blue</span>: <span class="number">174.0</span> / <span class="number">225.0</span>, <span class="built_in">alpha</span>: <span class="number">1.0</span>), forKey:<span class="string">"inputColor0"</span>)<span class="comment">///二维码元素（像素）</span></span><br><span class="line">        colorFilter!.setValue(CIColor(<span class="built_in">red</span>: <span class="number">1.0</span>, <span class="built_in">green</span>: <span class="number">1.0</span>, <span class="built_in">blue</span>: <span class="number">1.0</span>, <span class="built_in">alpha</span>: <span class="number">1</span>), forKey:<span class="string">"inputColor1"</span>)<span class="comment">///背景</span></span><br><span class="line">        </span><br><span class="line">        let colorImgae = colorFilter!.outputImage</span><br><span class="line">        let newQRCodeImage = UIImage(CIImage: colorImgae!)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> newQRCodeImage</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样将会得到彩色的二维码，效果也还不错，这里又添加colorFilter这样滤镜，达到着色的效果。iOS其实可以混合多个滤镜来实现很多不能的效果，手机自带的图片处理就是基于滤镜来完成，如果你有使用过PS，或了解过知识，这就很容易理解了。如果去掉这部分代码得到的将会是灰色的图片。</p><p>其实重新着色，还可以通过，context来重绘或者通过改变每个像素的的颜色值来达到目的，但是难度会远比添加一个滤镜要复杂的多，而且，Swift中通过指针来处理数据，写法将会更加复杂，这是因为Swift是一门语法安全性语言。也没有*P这样的写法。</p><p>关于CIFilter的更多知识，我就会在后续文章中分享，你们也可以通过资料去学习，总之，这部分知识还是很容易理解的，也比较有趣。</p><p>最后，想了解更多详情：请查看我的demo，记得给个Star，😝😝😝</p><p>下载：<a href="https://github.com/JornWu/MeiTuan_Swift" target="_blank" rel="noopener">点击这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;二维码扫面当下很流行，也带来了很多的便利。我也不是在吹捧，你也许你也发现，几乎凡是个APP，都有扫描二维码的功能。现在网上的资料很多，我也是闲的蛋疼，在做一个&lt;a href=&quot;https://github.com/JornWu/MeiTuan_Swift&quot; target=&quot;
      
    
    </summary>
    
      <category term="iOS" scheme="https://JornWu.github.io/categories/iOS/"/>
    
    
      <category term="Swift" scheme="https://JornWu.github.io/tags/Swift/"/>
    
      <category term="QRCode" scheme="https://JornWu.github.io/tags/QRCode/"/>
    
  </entry>
  
</feed>
